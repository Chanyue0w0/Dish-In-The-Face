using UnityEngine;
using UnityEditor;
using System.IO;
using System.Linq;

public class FoodTypeEnumGenerator : EditorWindow
{
	// ---- 可編輯欄位 ----
	private string enumName = "FoodType";                   // 1) 可設定的 Enum 名稱
	private string prefabsFolderPath = "Assets/Prefabs/Foods";
	private string outputFolderPath = "Assets/Scripts/Foods";

	// 固定命名空間（需要可再做成可輸入）
	private const string NamespaceName = "FoodsGroup";

	[MenuItem("Tools/Food Type Enum Generator")]
	public static void ShowWindow()
	{
		GetWindow<FoodTypeEnumGenerator>("Food Type Enum Generator");
	}

	private void OnGUI()
	{
		GUILayout.Label("Food Enum Generator", EditorStyles.boldLabel);
		EditorGUILayout.Space();

		// Enum 名稱設定
		EditorGUILayout.LabelField("Enum Name", EditorStyles.boldLabel);
		enumName = EditorGUILayout.TextField(enumName);
		var validEnumName = MakeValidIdentifier(enumName);
		if (enumName != validEnumName)
			EditorGUILayout.HelpBox($"實際輸出時將使用合法識別字：{validEnumName}", MessageType.Info);

		EditorGUILayout.Space();

		// Prefabs Folder
		EditorGUILayout.LabelField("Prefabs Folder", EditorStyles.boldLabel);
		EditorGUILayout.BeginHorizontal();
		prefabsFolderPath = EditorGUILayout.TextField("Path:", prefabsFolderPath);
		if (GUILayout.Button("選擇資料夾...", GUILayout.Width(110)))
		{
			string selected = EditorUtility.OpenFolderPanel("選擇 Prefabs 資料夾", ToAbsoluteProjectPathSafe(prefabsFolderPath), "");
			if (!string.IsNullOrEmpty(selected))
				prefabsFolderPath = ToProjectRelativePath(selected) ?? prefabsFolderPath;
		}
		EditorGUILayout.EndHorizontal();

		if (!IsProjectPath(prefabsFolderPath) || !Directory.Exists(ToAbsoluteProjectPathSafe(prefabsFolderPath)))
			EditorGUILayout.HelpBox("請指定專案內有效的 Prefabs 資料夾（例如以 Assets/ 開頭）。", MessageType.Warning);

		EditorGUILayout.Space();

		// Output Folder
		EditorGUILayout.LabelField("Output Folder", EditorStyles.boldLabel);
		EditorGUILayout.BeginHorizontal();
		outputFolderPath = EditorGUILayout.TextField("Path:", outputFolderPath);
		if (GUILayout.Button("選擇資料夾...", GUILayout.Width(110)))
		{
			string selected = EditorUtility.OpenFolderPanel("選擇輸出資料夾", ToAbsoluteProjectPathSafe(outputFolderPath), "");
			if (!string.IsNullOrEmpty(selected))
				outputFolderPath = ToProjectRelativePath(selected) ?? outputFolderPath;
		}
		EditorGUILayout.EndHorizontal();

		if (!IsProjectPath(outputFolderPath))
			EditorGUILayout.HelpBox("請指定專案內有效的輸出資料夾（例如以 Assets/ 開頭）。", MessageType.Warning);

		// 預覽最終輸出檔名
		string finalEnumName = MakeValidIdentifier(enumName);
		string finalFilePath = Path.Combine(outputFolderPath, $"{finalEnumName}.cs").Replace("\\", "/");
		EditorGUILayout.Space();
		EditorGUILayout.LabelField("將輸出檔案：", EditorStyles.miniBoldLabel);
		EditorGUILayout.SelectableLabel(finalFilePath);

		EditorGUILayout.Space();

		using (new EditorGUI.DisabledScope(!CanGenerate(finalEnumName)))
		{
			if (GUILayout.Button("Generate Enum"))
			{
				GenerateEnum(finalEnumName, prefabsFolderPath, outputFolderPath);
			}
		}
	}

	private bool CanGenerate(string finalEnumName)
	{
		if (string.IsNullOrEmpty(finalEnumName)) return false;
		if (!IsProjectPath(prefabsFolderPath)) return false;
		if (!IsProjectPath(outputFolderPath)) return false;

		string absPrefab = ToAbsoluteProjectPathSafe(prefabsFolderPath);
		if (!Directory.Exists(absPrefab)) return false;

		return true;
	}

	private void GenerateEnum(string finalEnumName, string prefabsFolder, string outputFolder)
	{
		string absPrefabs = ToAbsoluteProjectPathSafe(prefabsFolder);
		if (!Directory.Exists(absPrefabs))
		{
			Debug.LogError("找不到 Prefab 資料夾: " + prefabsFolder);
			return;
		}

		// 收集 prefab 名稱
		string[] prefabFiles = Directory.GetFiles(absPrefabs, "*.prefab", SearchOption.AllDirectories);

		var foodNames = prefabFiles
			.Select(f => Path.GetFileNameWithoutExtension(f))
			.Where(n => !string.IsNullOrWhiteSpace(n))
			.Select(n => CleanEnumMember(n))
			.Where(n => !string.IsNullOrEmpty(n))
			.Distinct()
			.OrderBy(n => n)
			.ToList();

		if (foodNames.Count == 0)
		{
			Debug.LogWarning("該資料夾沒有找到任何 prefab！");
			return;
		}

		// 準備輸出資料夾
		string absOutput = ToAbsoluteProjectPathSafe(outputFolder);
		if (!Directory.Exists(absOutput))
			Directory.CreateDirectory(absOutput);

		// 生成程式碼內容
		string enumContent =
$@"// <auto-generated>
// Generated by FoodTypeEnumGenerator on {System.DateTime.Now:yyyy-MM-dd HH:mm:ss}
// Source folder: {prefabsFolder}
// </auto-generated>

namespace {NamespaceName}
{{
	public enum {finalEnumName}
	{{
		None,
{string.Join("\n", foodNames.Select(n => $"\t\t{n},"))}
	}}
}}";

		// 寫檔
		string targetPath = Path.Combine(absOutput, $"{finalEnumName}.cs");
		File.WriteAllText(targetPath, enumContent);

		AssetDatabase.Refresh();

		Debug.Log($"{finalEnumName} enum 已更新，包含 {foodNames.Count} 個項目。輸出路徑：{ToProjectRelativePath(targetPath)}");
	}

	// ---------- Utils ----------

	// 將使用者輸入的 Enum 名稱修正為合法識別字（避免空白、特殊字元與數字開頭）
	private static string MakeValidIdentifier(string raw)
	{
		if (string.IsNullOrWhiteSpace(raw)) return string.Empty;

		// 保留字元：英數與底線，其餘移除；再將空白/符號視為分隔，組成 PascalCase
		string letters = new string(raw.Select(c => char.IsLetterOrDigit(c) ? c : ' ').ToArray());
		string[] parts = letters.Split(new[] { ' ' }, System.StringSplitOptions.RemoveEmptyEntries);
		if (parts.Length == 0) return string.Empty;

		string pascal = string.Concat(parts.Select(UppercaseFirst));
		if (char.IsDigit(pascal[0])) pascal = "_" + pascal;
		return pascal;
	}

	// 清理 enum 成員名稱：轉 PascalCase、移除無效字元、避免數字開頭
	private static string CleanEnumMember(string rawName)
	{
		return MakeValidIdentifier(rawName);
	}

	private static string UppercaseFirst(string s)
	{
		if (string.IsNullOrEmpty(s)) return s;
		if (s.Length == 1) return char.ToUpperInvariant(s[0]).ToString();
		return char.ToUpperInvariant(s[0]) + s.Substring(1);
	}

	// 是否為專案相對路徑（以 Assets/ 開頭）
	private static bool IsProjectPath(string path)
	{
		return !string.IsNullOrEmpty(path) && path.Replace("\\", "/").StartsWith("Assets/");
	}

	// 將絕對路徑轉為專案相對路徑（Assets/...），若不在專案內回傳 null
	private static string ToProjectRelativePath(string absolutePath)
	{
		if (string.IsNullOrEmpty(absolutePath)) return null;
		absolutePath = absolutePath.Replace("\\", "/");

		string projectRoot = Directory.GetParent(Application.dataPath).FullName.Replace("\\", "/");
		if (!absolutePath.StartsWith(projectRoot)) return null;

		string rel = absolutePath.Substring(projectRoot.Length).TrimStart('/');
		return rel.StartsWith("Assets/") ? rel : "Assets/" + rel; // 保守處理
	}

	// 將專案相對路徑轉為絕對路徑；若已是絕對路徑就直接回傳
	private static string ToAbsoluteProjectPathSafe(string path)
	{
		if (string.IsNullOrEmpty(path)) return path;
		path = path.Replace("\\", "/");

		if (Path.IsPathRooted(path)) return path;

		string projectRoot = Directory.GetParent(Application.dataPath).FullName.Replace("\\", "/");
		return Path.Combine(projectRoot, path).Replace("\\", "/");
	}
}
